buildscript {
    repositories {
        mavenCentral()
    }

    dependencies {
        classpath 'net.saliman:gradle-cobertura-plugin:2.2.4'
        classpath 'net.ltgt.gradle:gradle-errorprone-plugin:latest.release'
    }
}

apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'eclipse'
apply plugin: 'application'
apply plugin: 'errorprone'
apply plugin: 'cobertura'

version         = '0.1'
group           = 'io.knq.NycPOS'
description     = 'NycPOS'
//mainClassName   = 'com.openbravo.pos.config.JFrmConfig'
mainClassName   = 'com.openbravo.pos.forms.StartPOS'

repositories {
    mavenLocal()
    mavenCentral()
}

dependencies {
    //testCompile 'junit:junit:4.11'
    testCompile 'org.testng:testng:6.8.8'

    // logging dependencies
    compile 'org.slf4j:slf4j-simple:1.7.10'

    // dependencies taken from unicenta source
    compile 'axis:axis:1.3'
    compile 'commons-lang:commons-lang:2.4'
    compile 'net.sf.barcode4j:barcode4j:2.1'
    compile 'net.sf.jasperreports:jasperreports:4.5.1'
    compile 'net.sourceforge.javacsv:javacsv:2.0'
    compile 'org.apache.velocity:velocity:1.7'
    compile 'org.java.net.substance:substance:6.0'
    compile 'org.rxtx:rxtx:2.1.7'
    compile 'org.swinglabs:swing-layout:1.0.3'
    compile 'org.swinglabs.swingx:swingx-all:1.6.4'

    // jdbc & sql providers
    compile 'mysql:mysql-connector-java:5.1.34'
    compile 'org.apache.derby:derby:10.11.1.1'
    compile 'org.postgresql:postgresql:9.4-1200-jdbc41'

    // manually installed jars
    compile 'io.knq.beanshell2:bsh:2.1.8'
    compile 'io.knq.javapos:javapos:1.14.0'
    //compile 'io.knq.javapos:javapos-controls:1.14.0'
}

jar {
    manifest {
        attributes 'Main-Class': mainClassName
    }

    doFirst {
        from (configurations.runtime.resolve().collect { it.isDirectory() ? it : zipTree(it) }) {
            exclude 'META-INF/MANIFEST.MF'
            exclude 'META-INF/*.SF'
            exclude 'META-INF/*.DSA'
            exclude 'META-INF/*.RSA'
        }
    }
}

// simple divider ...
project.ext.dv = "--------------------------------------------------------------------------------------------------------"

test {
    useTestNG()

    beforeTest { desc ->
        logger.lifecycle(project.ext.dv)
        logger.lifecycle("> ${desc.className}:${desc.name}: START")
    }

    onOutput { desc, event ->
        //logger.lifecycle("> ${desc.className}:${desc.name}: ${event.message}")
        logger.lifecycle("> ${desc.name}: " + event.message.replaceAll(/\s*$/, ''))
    }

    afterTest { desc ->
        logger.lifecycle("> ${desc.className}:${desc.name}: END")
    }

    testLogging {
        afterSuite { desc, result ->
            // match only the outermost suite
            if (!desc.parent) {
                println "${project.ext.dv}\n> TestNG Results: ${result.resultType} (${result.testCount} total, ${result.successfulTestCount} succeeded, ${result.failedTestCount} failed, ${result.skippedTestCount} skipped)\n${project.ext.dv}\n"
            }
        }
    }
}

compileJava {
    // original unicenta code is overriding deprecated APIs (what the f???)
    // so toggle error output
    options.compilerArgs << '-Xlint:deprecation'
    options.compilerArgs << '-Xlint:unchecked'

    // inject annotation processor to compiler
    //options.compilerArgs << '-processorpath'
    //options.compilerArgs << file('path/to/annotation-processor.jar')
}

