buildscript {
    repositories {
        mavenCentral()
    }

    dependencies {
        classpath 'net.saliman:gradle-cobertura-plugin:2.2.4'
            classpath 'net.ltgt.gradle:gradle-errorprone-plugin:latest.release'
    }
}

apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'eclipse'
apply plugin: 'application'
apply plugin: 'errorprone'
apply plugin: 'cobertura'

version         = '0.1'
group           = 'io.knq.NycPOS'
description     = 'NycPOS'
mainClassName   = 'io.knq.NycPOS.NycPOS'

repositories {
    mavenLocal()
        mavenCentral()
}

dependencies {
    //testCompile 'junit:junit:4.11'
    testCompile 'org.testng:testng:6.8.8'

        // logging dependencies
        compile 'org.slf4j:slf4j-simple:1.7.10'
}

jar {
    from {
        configurations.compile.collect {
            it.isDirectory() ? it : zipTree(it)
        }
    }

    manifest {
        attributes 'Main-Class': mainClassName
    }
}

// simple divider ...
project.ext.dv = "--------------------------------------------------------------------------------------------------------"

test {
    useTestNG()

    beforeTest { desc ->
        logger.lifecycle(project.ext.dv)
        logger.lifecycle("> ${desc.className}:${desc.name}: START")
    }

    onOutput { desc, event ->
        //logger.lifecycle("> ${desc.className}:${desc.name}: ${event.message}")
        logger.lifecycle("> ${desc.name}: " + event.message.replaceAll(/\s*$/, ''))
    }

    afterTest { desc ->
        logger.lifecycle("> ${desc.className}:${desc.name}: END")
    }

    testLogging {
        afterSuite { desc, result ->
            // match only the outermost suite
            if (!desc.parent) {
                println "${project.ext.dv}\n> TestNG Results: ${result.resultType} (${result.testCount} total, ${result.successfulTestCount} succeeded, ${result.failedTestCount} failed, ${result.skippedTestCount} skipped)\n${project.ext.dv}\n"
            }
        }
    }
}
