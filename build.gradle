buildscript {
    repositories {
        mavenCentral()
        mavenLocal()
    }

    dependencies {
        // code coverage and better error reporting
        classpath 'net.saliman:gradle-cobertura-plugin:2.2.4'
        classpath 'net.ltgt.gradle:gradle-errorprone-plugin:latest.release'

        // liquibase plugin (installed locally, as the latest isn't yet
        // available in a public maven repo)
        classpath 'net.saliman:gradle-liquibase-plugin:1.0.1-SNAPSHOT'
    }

    // load shared dbdeps.gradle (needed for the liquibase tasks)
    apply from: 'dbdeps.gradle'
    ext.db_deps.each { v -> dependencies.classpath v }
}

apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'eclipse'
apply plugin: 'application'
apply plugin: 'errorprone'
apply plugin: 'cobertura'
apply plugin: 'liquibase'

version         = project.ext.app_version
group           = 'io.knq.' + project.ext.app_name
description     = project.ext.app_name
//mainClassName   = 'com.openbravo.pos.config.JFrmConfig'
mainClassName   = 'com.openbravo.pos.forms.StartPOS'

// add maven repositories
repositories {
    mavenLocal()
    mavenCentral()
}

// set up project dependencies
dependencies {
    // testing deps
    //testCompile 'junit:junit:4.11'
    testCompile 'org.testng:testng:6.8.8'

    // logging deps
    compile 'org.slf4j:slf4j-simple:1.7.10'

    // deps taken from unicenta source
    compile 'axis:axis:1.3'
    compile 'commons-lang:commons-lang:2.4'
    compile 'net.sf.barcode4j:barcode4j:2.1'
    compile 'net.sf.jasperreports:jasperreports:4.5.1'
    compile 'net.sourceforge.javacsv:javacsv:2.0'
    compile 'org.apache.velocity:velocity:1.7'
    compile 'org.java.net.substance:substance:6.0'
    compile 'org.rxtx:rxtx:2.1.7'
    compile 'org.swinglabs:swing-layout:1.0.3'
    compile 'org.swinglabs.swingx:swingx-all:1.6.4'

    // manually installed deps (FIXME)
    compile 'io.knq.beanshell2:bsh:2.1.8'
    compile 'io.knq.javapos:javapos:1.14.0'
}

// add database deps to gradle deps
apply from: 'dbdeps.gradle'
ext.db_deps.each { v -> dependencies.compile v }

// configure jar build
jar {
    manifest {
        attributes 'Main-Class': mainClassName
    }

    doFirst {
        from (configurations.runtime.resolve().collect { it.isDirectory() ? it : zipTree(it) }) {
            exclude 'META-INF/MANIFEST.MF'
            exclude 'META-INF/*.SF'
            exclude 'META-INF/*.DSA'
            exclude 'META-INF/*.RSA'
        }
    }
}

// simple divider ...
def divider = "--------------------------------------------------------------------------------------------------------"

// configure unit testing
test {
    useTestNG()

    beforeTest { desc ->
        logger.lifecycle(divider)
        logger.lifecycle("> ${desc.className}:${desc.name}: START")
    }

    onOutput { desc, event ->
        //logger.lifecycle("> ${desc.className}:${desc.name}: ${event.message}")
        logger.lifecycle("> ${desc.name}: " + event.message.replaceAll(/\s*$/, ''))
    }

    afterTest { desc ->
        logger.lifecycle("> ${desc.className}:${desc.name}: END")
    }

    testLogging {
        afterSuite { desc, result ->
            // match only the outermost suite
            if (!desc.parent) {
                println "${divider}\n> TestNG Results: ${result.resultType} (${result.testCount} total, ${result.successfulTestCount} succeeded, ${result.failedTestCount} failed, ${result.skippedTestCount} skipped)\n${divider}\n"
            }
        }
    }
}

// configure java compiliation parameters
compileJava {
    // original unicenta code is overriding deprecated APIs (what the f???)
    // so toggle error output
    options.compilerArgs << '-Xlint:deprecation'
    options.compilerArgs << '-Xlint:unchecked'

    // inject annotation processor to compiler
    //options.compilerArgs << '-processorpath'
    //options.compilerArgs << file('path/to/annotation-processor.jar')
}

// print project's properties
task printProjectProps << {
    println "${divider}\n> Project properties: \n"
    project.ext.properties.each {k, v ->
        println "${k} = ${v}"
    }
}
